{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This cell is for importing of packages that we require.\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import itertools\n",
    "import openpyxl \n",
    "import pandas as pd\n",
    "pd.options.mode.chained_assignment = None  # default='warn'\n",
    "pd.options.display.float_format = \"{:,.5f}\".format\n",
    "from matplotlib.dates import DateFormatter\n",
    "from matplotlib import rcParams\n",
    "rcParams.update({'figure.autolayout': True})\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "import matplotlib.dates as mdates\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import yfinance as yf\n",
    "import datetime as dt\n",
    "from pandas_datareader import data as pdr\n",
    "\n",
    "import termcolor\n",
    "from termcolor import colored, cprint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel(\"gbpusd.xlsx\")\n",
    "df = df[515:]\n",
    "df = df.reset_index()\n",
    "df.drop('index',axis=1,inplace=True)\n",
    "\n",
    "\n",
    "# Getting the Week Day\n",
    "df[\"Weekday\"] = df[\"Date\"].dt.weekday\n",
    "\n",
    "weekday = []\n",
    "\n",
    "for i in range(len(df)):\n",
    "    if df[\"Weekday\"][i] == 0:\n",
    "        day = \"Monday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 1:\n",
    "        day = \"Tuesday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 2:\n",
    "        day = \"Wednesday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 3:\n",
    "        day = \"Thursday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 4:\n",
    "        day = \"Friday\"\n",
    "        weekday.append(day)\n",
    "        \n",
    "df[\"Weekday\"] = weekday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.read_excel(\"output_gbp_usd.xlsx\")\n",
    "df2.columns = [\"Forecast\",\"Lower Band\",\"Upper Band\"]\n",
    "df2.index = pd.RangeIndex(start=1,stop=261)\n",
    "df = pd.concat([df,df2],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.iloc[1:,:]\n",
    "df = df.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Signal\"] = \"Long\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "realsignal = [] \n",
    "lb = []\n",
    "ub = []\n",
    "\n",
    "for i in range(len(df)):\n",
    "    if df[\"Weekday\"][i] == \"Monday\":\n",
    "            signal = df[\"Signal\"][i+4]\n",
    "            lowerband = df[\"Lower Band\"][i+4]\n",
    "            upperband = df[\"Upper Band\"][i+4]\n",
    "            realsignal.append(signal)\n",
    "            lb.append(lowerband)\n",
    "            ub.append(upperband)\n",
    "            \n",
    "    elif df[\"Weekday\"][i] == \"Tuesday\":\n",
    "            signal = df[\"Signal\"][i+3]\n",
    "            lowerband = df[\"Lower Band\"][i+3]\n",
    "            upperband = df[\"Upper Band\"][i+3]\n",
    "            realsignal.append(signal)\n",
    "            lb.append(lowerband)\n",
    "            ub.append(upperband)\n",
    "    elif df[\"Weekday\"][i] == \"Wednesday\":\n",
    "            signal = df[\"Signal\"][i+2]\n",
    "            lowerband = df[\"Lower Band\"][i+2]\n",
    "            upperband = df[\"Upper Band\"][i+2]\n",
    "            realsignal.append(signal)\n",
    "            lb.append(lowerband)\n",
    "            ub.append(upperband)\n",
    "    elif df[\"Weekday\"][i] == \"Thursday\":\n",
    "            signal = df[\"Signal\"][i+1]\n",
    "            lowerband = df[\"Lower Band\"][i+1]\n",
    "            upperband = df[\"Upper Band\"][i+1]\n",
    "            realsignal.append(signal)\n",
    "            lb.append(lowerband)\n",
    "            ub.append(upperband)\n",
    "    elif df[\"Weekday\"][i] == \"Friday\":\n",
    "            try:\n",
    "                signal = df[\"Signal\"][i]\n",
    "                lowerband = df[\"Lower Band\"][i]\n",
    "                upperband = df[\"Upper Band\"][i]\n",
    "                realsignal.append(signal)\n",
    "                lb.append(lowerband)\n",
    "                ub.append(upperband)\n",
    "            except:\n",
    "                print(\"Error Here\")\n",
    "\n",
    "df[\"Signal\"] = realsignal\n",
    "df[\"Lower Band\"] = lb \n",
    "df[\"Upper Band\"] = ub "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "gainloss = 2.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_long = df[df.values == \"Long\"]\n",
    "df_long[\"Signal Entry Price\"] = df_long[\"Lower Band\"]\n",
    "df_long[\"Signal Exit Price\"] = df_long[\"Upper Band\"]\n",
    "df_long[\"Stop Loss\"] = df_long[\"Signal Entry Price\"] - (1/gainloss * (df_long[\"Signal Exit Price\"] - df_long[\"Signal Entry Price\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Trading Engine for Long\n",
    "\n",
    "df_long.loc[(df_long[\"Signal Entry Price\"] > df_long[\"Low\"]),'Potential for Entry'] = \"Potential for Entry\"\n",
    "df_long.loc[(df_long[\"Signal Exit Price\"] < df_long[\"High\"]),'Potential for Exit'] = \"Potential for Exit\"\n",
    "df_long.loc[(df_long[\"Weekday\"] == \"Friday\"),'Potential for Exit'] = \"Potential for Exit\"\n",
    "\n",
    "df_long.loc[(df_long[\"Potential for Entry\"] == \"Potential for Entry\"),'True Signal'] = \"Buy\"\n",
    "df_long.loc[(df_long[\"Potential for Exit\"] == \"Potential for Exit\"),'True Signal'] = \"Sell\"\n",
    "\n",
    "df_long.reset_index(inplace=True)\n",
    "\n",
    "df_long = df_long.drop(columns=\"index\")\n",
    "df_long = df_long.drop(columns=\"level_0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ready_to_buy = True\n",
    "position = []\n",
    "for row in df_long.iterrows():\n",
    "    signal = row[1].iat[15] # Signal is column 13\n",
    "    pos = 0 # All rows start at 0 pos\n",
    "    if signal == 'Sell':\n",
    "        ready_to_buy = True\n",
    "    elif signal == 'Buy':\n",
    "        if ready_to_buy:\n",
    "            pos = 1\n",
    "            ready_to_buy = False\n",
    "    position.append(pos)\n",
    "\n",
    "df_long['Real_Position'] = position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Position automatically sold.\n",
      "Trading Simulation Ended\n"
     ]
    }
   ],
   "source": [
    "g = 0\n",
    "entry_prices = []\n",
    "exit_prices = []\n",
    "exit_prices = []\n",
    "\n",
    "entry_date = []\n",
    "exit_date = []\n",
    "\n",
    "try:\n",
    "    for i in range(1,60):\n",
    "        \n",
    "        newframe = df_long[0+g:5+g]\n",
    "        newframe.reset_index(inplace = True, drop = True)\n",
    "        \n",
    "        for j in range(0,5):\n",
    "            if newframe[\"Real_Position\"][j] == 1:\n",
    "                entry_prices.append(newframe[\"Signal Entry Price\"][j])\n",
    "                entry_date.append(newframe[\"Date\"][j])\n",
    "                \n",
    "                try:\n",
    "                    for x in itertools.count(start=1):\n",
    "                        if newframe[\"Low\"][j] <= newframe[\"Stop Loss\"][j+x]:\n",
    "                            print(\"Position hit SL level.\")\n",
    "                            exit = newframe[\"Stop Loss\"][j]\n",
    "                            exit_prices.append(exit)\n",
    "                            exit_date.append(newframe[\"Date\"][j+x])\n",
    "                            break \n",
    "                        if newframe[\"Signal Exit Price\"][j] <= newframe[\"High\"][j+x]: # Winning Trade\n",
    "                            print(\"Position hit TP level.\")\n",
    "                            exit = newframe[\"Signal Exit Price\"][j]\n",
    "                            exit_prices.append(exit)\n",
    "                            exit_date.append(newframe[\"Date\"][j+x])\n",
    "                            break\n",
    "\n",
    "                except:\n",
    "                    for x in itertools.count(start=1):            \n",
    "                        if newframe[\"Signal Exit Price\"][j] >= newframe[\"High\"][j+x]: # Unable to Hit TP\n",
    "                            print(\"Position automatically sold.\")\n",
    "                            exit = newframe[\"Close\"].iloc[-1]\n",
    "                            exit_prices.append(exit)\n",
    "                            exit_date.append(newframe[\"Date\"].iloc[-1])\n",
    "                            break\n",
    "                    \n",
    "                    \n",
    "        g = g+5\n",
    "except:\n",
    "    print(\"Trading Simulation Ended\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entry Date</th>\n",
       "      <th>Exit Date</th>\n",
       "      <th>Entry Price</th>\n",
       "      <th>Exit Price</th>\n",
       "      <th>P&amp;L (Pips)</th>\n",
       "      <th>Position</th>\n",
       "      <th>Avg Holding Period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-09-28</td>\n",
       "      <td>2020-10-02</td>\n",
       "      <td>1.28374</td>\n",
       "      <td>1.29353</td>\n",
       "      <td>97.94348</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-12</td>\n",
       "      <td>2020-10-16</td>\n",
       "      <td>1.30739</td>\n",
       "      <td>1.29153</td>\n",
       "      <td>-158.56497</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-28</td>\n",
       "      <td>2020-10-30</td>\n",
       "      <td>1.29347</td>\n",
       "      <td>1.29469</td>\n",
       "      <td>12.16309</td>\n",
       "      <td>Long</td>\n",
       "      <td>2 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-01-11</td>\n",
       "      <td>2021-01-15</td>\n",
       "      <td>1.34922</td>\n",
       "      <td>1.35903</td>\n",
       "      <td>98.07793</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-01-25</td>\n",
       "      <td>2021-01-29</td>\n",
       "      <td>1.36784</td>\n",
       "      <td>1.37080</td>\n",
       "      <td>29.58936</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2021-02-08</td>\n",
       "      <td>2021-02-12</td>\n",
       "      <td>1.37631</td>\n",
       "      <td>1.38485</td>\n",
       "      <td>85.39418</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2021-02-22</td>\n",
       "      <td>2021-02-26</td>\n",
       "      <td>1.40880</td>\n",
       "      <td>1.39329</td>\n",
       "      <td>-155.06128</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2021-03-08</td>\n",
       "      <td>2021-03-12</td>\n",
       "      <td>1.38086</td>\n",
       "      <td>1.39241</td>\n",
       "      <td>115.48404</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2021-03-24</td>\n",
       "      <td>2021-03-26</td>\n",
       "      <td>1.36801</td>\n",
       "      <td>1.37889</td>\n",
       "      <td>108.78121</td>\n",
       "      <td>Long</td>\n",
       "      <td>2 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2021-04-07</td>\n",
       "      <td>2021-04-09</td>\n",
       "      <td>1.37408</td>\n",
       "      <td>1.37074</td>\n",
       "      <td>-33.39337</td>\n",
       "      <td>Long</td>\n",
       "      <td>2 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2021-04-19</td>\n",
       "      <td>2021-04-23</td>\n",
       "      <td>1.38565</td>\n",
       "      <td>1.38756</td>\n",
       "      <td>19.10077</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2021-05-10</td>\n",
       "      <td>2021-05-14</td>\n",
       "      <td>1.39875</td>\n",
       "      <td>1.40966</td>\n",
       "      <td>109.06048</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2021-06-17</td>\n",
       "      <td>2021-06-18</td>\n",
       "      <td>1.39276</td>\n",
       "      <td>1.38104</td>\n",
       "      <td>-117.21542</td>\n",
       "      <td>Long</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2021-06-21</td>\n",
       "      <td>2021-06-25</td>\n",
       "      <td>1.37908</td>\n",
       "      <td>1.38791</td>\n",
       "      <td>88.26882</td>\n",
       "      <td>Long</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2021-08-19</td>\n",
       "      <td>2021-08-20</td>\n",
       "      <td>1.36737</td>\n",
       "      <td>1.36228</td>\n",
       "      <td>-50.91396</td>\n",
       "      <td>Long</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Entry Date  Exit Date Entry Price Exit Price P&L (Pips) Position  \\\n",
       "0  2020-09-28 2020-10-02     1.28374    1.29353   97.94348     Long   \n",
       "1  2020-10-12 2020-10-16     1.30739    1.29153 -158.56497     Long   \n",
       "2  2020-10-28 2020-10-30     1.29347    1.29469   12.16309     Long   \n",
       "3  2021-01-11 2021-01-15     1.34922    1.35903   98.07793     Long   \n",
       "4  2021-01-25 2021-01-29     1.36784    1.37080   29.58936     Long   \n",
       "5  2021-02-08 2021-02-12     1.37631    1.38485   85.39418     Long   \n",
       "6  2021-02-22 2021-02-26     1.40880    1.39329 -155.06128     Long   \n",
       "7  2021-03-08 2021-03-12     1.38086    1.39241  115.48404     Long   \n",
       "8  2021-03-24 2021-03-26     1.36801    1.37889  108.78121     Long   \n",
       "9  2021-04-07 2021-04-09     1.37408    1.37074  -33.39337     Long   \n",
       "10 2021-04-19 2021-04-23     1.38565    1.38756   19.10077     Long   \n",
       "11 2021-05-10 2021-05-14     1.39875    1.40966  109.06048     Long   \n",
       "12 2021-06-17 2021-06-18     1.39276    1.38104 -117.21542     Long   \n",
       "13 2021-06-21 2021-06-25     1.37908    1.38791   88.26882     Long   \n",
       "14 2021-08-19 2021-08-20     1.36737    1.36228  -50.91396     Long   \n",
       "\n",
       "   Avg Holding Period  \n",
       "0              4 days  \n",
       "1              4 days  \n",
       "2              2 days  \n",
       "3              4 days  \n",
       "4              4 days  \n",
       "5              4 days  \n",
       "6              4 days  \n",
       "7              4 days  \n",
       "8              2 days  \n",
       "9              2 days  \n",
       "10             4 days  \n",
       "11             4 days  \n",
       "12             1 days  \n",
       "13             4 days  \n",
       "14             1 days  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "longlist= [entry_date,exit_date,entry_prices,exit_prices]\n",
    "longlist = pd.DataFrame(longlist)\n",
    "longlist = pd.DataFrame.transpose(longlist)\n",
    "longlist.columns = [\"Entry Date\",'Exit Date','Entry Price','Exit Price']\n",
    "\n",
    "longlist[\"P&L (Pips)\"] = (longlist[\"Exit Price\"] - longlist['Entry Price'] ) * 10000\n",
    "longlist[\"Position\"] = \"Long\"\n",
    "longlist[\"Avg Holding Period\"] = longlist[\"Exit Date\"] - longlist[\"Entry Date\"]\n",
    "longlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Long - Winning Trades: 10\n",
      "Long - Losing Trades: 5\n",
      "Long - Total Trades: 15\n",
      "Long - Total Win (%): 66.66666666666666\n",
      "Long - Total Pips Won: 248.71436605905734\n",
      "Long - Avg Pips Per Trade:  16.580957737270488\n",
      "Long - Avg Win Pips Per Trade: 763.8633675361662\n",
      "Long - Avg Lose Pips Per Trade: -515.1490014771088\n"
     ]
    }
   ],
   "source": [
    "long_win_trade = len(longlist.loc[longlist[\"P&L (Pips)\"] >0])\n",
    "long_trade = len(longlist)\n",
    "long_lose_trade = long_trade - long_win_trade\n",
    "totalpipwon_long = sum(longlist[\"P&L (Pips)\"])\n",
    "pip_per_trade = totalpipwon_long/long_trade\n",
    "winpipcal = (longlist.loc[longlist[\"P&L (Pips)\"] >0])\n",
    "winpips_long = sum(winpipcal[\"P&L (Pips)\"])\n",
    "losepipcal = (longlist.loc[longlist[\"P&L (Pips)\"] <0])\n",
    "losepips_long = sum(losepipcal[\"P&L (Pips)\"])\n",
    "win_pct = long_win_trade/long_trade\n",
    "\n",
    "print(\"Long - Winning Trades:\",long_win_trade)\n",
    "\n",
    "print(\"Long - Losing Trades:\",long_lose_trade)\n",
    "print(\"Long - Total Trades:\",long_trade)\n",
    "print(\"Long - Total Win (%):\", win_pct*100)\n",
    "print(\"Long - Total Pips Won:\",totalpipwon_long)\n",
    "print(\"Long - Avg Pips Per Trade: \",totalpipwon_long/long_trade)\n",
    "print(\"Long - Avg Win Pips Per Trade:\",winpips_long)\n",
    "print(\"Long - Avg Lose Pips Per Trade:\",losepips_long)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel(\"gbpusd.xlsx\")\n",
    "df = df[515:]\n",
    "df = df.reset_index()\n",
    "df.drop('index',axis=1,inplace=True)\n",
    "\n",
    "\n",
    "# Getting the Week Day\n",
    "df[\"Weekday\"] = df[\"Date\"].dt.weekday\n",
    "\n",
    "weekday = []\n",
    "\n",
    "for i in range(len(df)):\n",
    "    if df[\"Weekday\"][i] == 0:\n",
    "        day = \"Monday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 1:\n",
    "        day = \"Tuesday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 2:\n",
    "        day = \"Wednesday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 3:\n",
    "        day = \"Thursday\"\n",
    "        weekday.append(day)\n",
    "    elif df[\"Weekday\"][i] == 4:\n",
    "        day = \"Friday\"\n",
    "        weekday.append(day)\n",
    "        \n",
    "df[\"Weekday\"] = weekday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.read_excel(\"output_gbp_usd.xlsx\")\n",
    "df2.columns = [\"Forecast\",\"Lower Band\",\"Upper Band\"]\n",
    "df2.index = pd.RangeIndex(start=1,stop=261)\n",
    "df = pd.concat([df,df2],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.iloc[1:,:]\n",
    "df = df.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Signal\"] = \"Short\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_short = df[df.values == \"Short\"]\n",
    "df_short[\"Signal Entry Price\"] = df_short[\"Upper Band\"]\n",
    "df_short[\"Signal Exit Price\"] = df_short[\"Lower Band\"]\n",
    "df_short[\"Stop Loss\"] = df_short[\"Signal Entry Price\"] + (1/gainloss * (df_short[\"Signal Entry Price\"] - df_short[\"Signal Exit Price\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Trading Engine for Short\n",
    "\n",
    "df_short.loc[(df_short[\"Signal Entry Price\"] < df_short[\"High\"]),'Potential for Entry'] = \"Potential for Entry\"\n",
    "df_short.loc[(df_short[\"Signal Exit Price\"] > df_short[\"Low\"]),'Potential for Exit'] = \"Potential for Exit\"\n",
    "df_short.loc[(df_short[\"Weekday\"] == \"Friday\"),'Potential for Exit'] = \"Potential for Exit\"\n",
    "\n",
    "df_short.loc[(df_short[\"Potential for Entry\"] == \"Potential for Entry\"),'True Signal'] = \"Buy\" # In this scenario -> Buy refers to entry (i.e. Short)\n",
    "df_short.loc[(df_short[\"Potential for Exit\"] == \"Potential for Exit\"),'True Signal'] = \"Sell\" # In this scenario -> Sell refers to exit (i.e. Long)\n",
    "\n",
    "df_short.reset_index(inplace=True)\n",
    "\n",
    "df_short = df_short.drop(columns=\"index\")\n",
    "df_short = df_short.drop(columns=\"level_0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "ready_to_buy = True\n",
    "position = []\n",
    "for row in df_short.iterrows():\n",
    "    signal = row[1].iat[15] # Signal is column 13\n",
    "    pos = 0 # All rows start at 0 pos\n",
    "    if signal == 'Sell':\n",
    "        ready_to_buy = True\n",
    "    elif signal == 'Buy':\n",
    "        if ready_to_buy:\n",
    "            pos = 1\n",
    "            ready_to_buy = False\n",
    "    position.append(pos)\n",
    "\n",
    "df_short['Real_Position'] = position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "stop out\n",
      "stop out\n",
      "stop out\n",
      "stop out\n",
      "stop out\n",
      "here\n",
      "stop out\n",
      "here\n",
      "stop out\n",
      "stop out\n",
      "True\n",
      "stop out\n",
      "stop out\n",
      "stop out\n",
      "here\n",
      "True\n",
      "here\n"
     ]
    }
   ],
   "source": [
    "g = 0\n",
    "entry_prices = []\n",
    "exit_prices = []\n",
    "exit_prices = []\n",
    "\n",
    "entry_date = []\n",
    "exit_date = []\n",
    "\n",
    "try:\n",
    "    for i in range(1,50):\n",
    "        \n",
    "        newframe = df_short[0+g:5+g]\n",
    "        newframe.reset_index(inplace = True, drop = True)\n",
    "        \n",
    "        for j in range(0,5):\n",
    "            if newframe[\"Real_Position\"][j] == 1:\n",
    "                entry_prices.append(newframe[\"Signal Entry Price\"][j])\n",
    "                entry_date.append(newframe[\"Date\"][j])\n",
    "                \n",
    "                try:\n",
    "                    for x in itertools.count(start=1):\n",
    "                        if newframe[\"Stop Loss\"][j] <= newframe[\"High\"][j+x]:\n",
    "                            print(\"stop out\") \n",
    "                            exit = newframe[\"Stop Loss\"][j]\n",
    "                            exit_prices.append(exit)\n",
    "                            exit_date.append(newframe[\"Date\"][j+x])\n",
    "                            break\n",
    "                        if newframe[\"Signal Exit Price\"][j] >= newframe[\"Low\"][j+x]: # Winning Trade\n",
    "                            print(\"True\")\n",
    "                            exit = newframe[\"Signal Exit Price\"][j]\n",
    "                            exit_prices.append(exit)\n",
    "                            exit_date.append(newframe[\"Date\"][j+x])\n",
    "                            break\n",
    "\n",
    "                except:\n",
    "                    for x in itertools.count(start=1):            \n",
    "                        if newframe[\"Signal Exit Price\"][j] <= newframe[\"Low\"][j+x]: # Unable to Hit TP\n",
    "                            print(\"here\")\n",
    "                            exit = newframe[\"Close\"].iloc[-1]\n",
    "                            exit_prices.append(exit)\n",
    "                            exit_date.append(newframe[\"Date\"].iloc[-1])\n",
    "                            break\n",
    "                    \n",
    "                    \n",
    "        g = g+5\n",
    "except:\n",
    "    print(\"This is the end\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entry Date</th>\n",
       "      <th>Exit Date</th>\n",
       "      <th>Entry Price</th>\n",
       "      <th>Exit Price</th>\n",
       "      <th>P&amp;L (Pips)</th>\n",
       "      <th>Position</th>\n",
       "      <th>Avg Holding Period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-09-21</td>\n",
       "      <td>2020-09-22</td>\n",
       "      <td>1.28585</td>\n",
       "      <td>1.27321</td>\n",
       "      <td>126.36911</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-19</td>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>1.29780</td>\n",
       "      <td>1.30285</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>2 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-11-02</td>\n",
       "      <td>2020-11-03</td>\n",
       "      <td>1.29361</td>\n",
       "      <td>1.29866</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-11-16</td>\n",
       "      <td>2020-11-17</td>\n",
       "      <td>1.32142</td>\n",
       "      <td>1.32647</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-11-30</td>\n",
       "      <td>2020-12-01</td>\n",
       "      <td>1.33447</td>\n",
       "      <td>1.33952</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2020-12-14</td>\n",
       "      <td>2020-12-15</td>\n",
       "      <td>1.33523</td>\n",
       "      <td>1.34028</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2020-12-24</td>\n",
       "      <td>2020-12-25</td>\n",
       "      <td>1.35394</td>\n",
       "      <td>1.35603</td>\n",
       "      <td>-20.89569</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2020-12-28</td>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>1.34896</td>\n",
       "      <td>1.35401</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>2 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2021-01-04</td>\n",
       "      <td>2021-01-08</td>\n",
       "      <td>1.36516</td>\n",
       "      <td>1.35675</td>\n",
       "      <td>84.08727</td>\n",
       "      <td>Short</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2021-01-11</td>\n",
       "      <td>2021-01-12</td>\n",
       "      <td>1.35610</td>\n",
       "      <td>1.36115</td>\n",
       "      <td>-50.54764</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2021-01-20</td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td>1.36250</td>\n",
       "      <td>1.37189</td>\n",
       "      <td>-93.89246</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>2021-02-04</td>\n",
       "      <td>1.37134</td>\n",
       "      <td>1.35870</td>\n",
       "      <td>126.36911</td>\n",
       "      <td>Short</td>\n",
       "      <td>3 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2021-02-16</td>\n",
       "      <td>2021-02-19</td>\n",
       "      <td>1.39369</td>\n",
       "      <td>1.40110</td>\n",
       "      <td>-74.14206</td>\n",
       "      <td>Short</td>\n",
       "      <td>3 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2021-03-01</td>\n",
       "      <td>2021-03-03</td>\n",
       "      <td>1.39408</td>\n",
       "      <td>1.39913</td>\n",
       "      <td>-50.54765</td>\n",
       "      <td>Short</td>\n",
       "      <td>2 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2021-03-15</td>\n",
       "      <td>2021-03-18</td>\n",
       "      <td>1.39269</td>\n",
       "      <td>1.39774</td>\n",
       "      <td>-50.54765</td>\n",
       "      <td>Short</td>\n",
       "      <td>3 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2021-03-29</td>\n",
       "      <td>2021-04-02</td>\n",
       "      <td>1.38317</td>\n",
       "      <td>1.38317</td>\n",
       "      <td>-0.01628</td>\n",
       "      <td>Short</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2021-07-19</td>\n",
       "      <td>2021-07-20</td>\n",
       "      <td>1.37140</td>\n",
       "      <td>1.35817</td>\n",
       "      <td>132.31336</td>\n",
       "      <td>Short</td>\n",
       "      <td>1 days</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2021-08-09</td>\n",
       "      <td>2021-08-13</td>\n",
       "      <td>1.39124</td>\n",
       "      <td>1.38656</td>\n",
       "      <td>46.77682</td>\n",
       "      <td>Short</td>\n",
       "      <td>4 days</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Entry Date  Exit Date Entry Price Exit Price P&L (Pips) Position  \\\n",
       "0  2020-09-21 2020-09-22     1.28585    1.27321  126.36911    Short   \n",
       "1  2020-10-19 2020-10-21     1.29780    1.30285  -50.54764    Short   \n",
       "2  2020-11-02 2020-11-03     1.29361    1.29866  -50.54764    Short   \n",
       "3  2020-11-16 2020-11-17     1.32142    1.32647  -50.54764    Short   \n",
       "4  2020-11-30 2020-12-01     1.33447    1.33952  -50.54764    Short   \n",
       "5  2020-12-14 2020-12-15     1.33523    1.34028  -50.54764    Short   \n",
       "6  2020-12-24 2020-12-25     1.35394    1.35603  -20.89569    Short   \n",
       "7  2020-12-28 2020-12-30     1.34896    1.35401  -50.54764    Short   \n",
       "8  2021-01-04 2021-01-08     1.36516    1.35675   84.08727    Short   \n",
       "9  2021-01-11 2021-01-12     1.35610    1.36115  -50.54764    Short   \n",
       "10 2021-01-20 2021-01-21     1.36250    1.37189  -93.89246    Short   \n",
       "11 2021-02-01 2021-02-04     1.37134    1.35870  126.36911    Short   \n",
       "12 2021-02-16 2021-02-19     1.39369    1.40110  -74.14206    Short   \n",
       "13 2021-03-01 2021-03-03     1.39408    1.39913  -50.54765    Short   \n",
       "14 2021-03-15 2021-03-18     1.39269    1.39774  -50.54765    Short   \n",
       "15 2021-03-29 2021-04-02     1.38317    1.38317   -0.01628    Short   \n",
       "16 2021-07-19 2021-07-20     1.37140    1.35817  132.31336    Short   \n",
       "17 2021-08-09 2021-08-13     1.39124    1.38656   46.77682    Short   \n",
       "\n",
       "   Avg Holding Period  \n",
       "0              1 days  \n",
       "1              2 days  \n",
       "2              1 days  \n",
       "3              1 days  \n",
       "4              1 days  \n",
       "5              1 days  \n",
       "6              1 days  \n",
       "7              2 days  \n",
       "8              4 days  \n",
       "9              1 days  \n",
       "10             1 days  \n",
       "11             3 days  \n",
       "12             3 days  \n",
       "13             2 days  \n",
       "14             3 days  \n",
       "15             4 days  \n",
       "16             1 days  \n",
       "17             4 days  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shortlist = [entry_date,exit_date,entry_prices,exit_prices]\n",
    "shortlist = pd.DataFrame(shortlist)\n",
    "shortlist = pd.DataFrame.transpose(shortlist)\n",
    "shortlist.columns = [\"Entry Date\",\"Exit Date\",\"Entry Price\",\"Exit Price\"]\n",
    "shortlist[\"P&L (Pips)\"] = (shortlist[\"Entry Price\"] - shortlist[\"Exit Price\"]) * 10000\n",
    "shortlist[\"Position\"] = \"Short\"\n",
    "shortlist[\"Avg Holding Period\"] = shortlist[\"Exit Date\"] - shortlist[\"Entry Date\"]\n",
    "shortlist\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "short - Winning Trades: 5\n",
      "short - Losing Trades: 13\n",
      "short - Total Trades: 18\n",
      "short - Total Win (%): 27.77777777777778\n",
      "short - Total Pips Won: -127.9596238638114\n",
      "short - Avg Pips Per Trade:  -7.108867992433967\n",
      "short - Avg Win Pips Per Trade: 515.9156836056188\n",
      "short - Avg Lose Pips Per Trade: -643.8753074694305\n"
     ]
    }
   ],
   "source": [
    "short_win_trade = len(shortlist.loc[shortlist[\"P&L (Pips)\"] >0])\n",
    "short_trade = len(shortlist)\n",
    "short_lose_trade = short_trade - short_win_trade\n",
    "totalpipwon_short = sum(shortlist[\"P&L (Pips)\"])\n",
    "pip_per_trade = totalpipwon_short/short_trade\n",
    "winpipcal = (shortlist.loc[shortlist[\"P&L (Pips)\"] >0])\n",
    "winpips_short = sum(winpipcal[\"P&L (Pips)\"])\n",
    "losepipcal = (shortlist.loc[shortlist[\"P&L (Pips)\"] <0])\n",
    "losepips_short = sum(losepipcal[\"P&L (Pips)\"])\n",
    "win_pct = short_win_trade/short_trade\n",
    "\n",
    "print(\"short - Winning Trades:\",short_win_trade)\n",
    "\n",
    "print(\"short - Losing Trades:\",short_lose_trade)\n",
    "print(\"short - Total Trades:\",short_trade)\n",
    "print(\"short - Total Win (%):\", win_pct*100)\n",
    "print(\"short - Total Pips Won:\",totalpipwon_short)\n",
    "print(\"short - Avg Pips Per Trade: \",totalpipwon_short/short_trade)\n",
    "print(\"short - Avg Win Pips Per Trade:\",winpips_short)\n",
    "print(\"short - Avg Lose Pips Per Trade:\",losepips_short)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "87bb9c10e46c607418504677b3e59d9f2d0ef59ae32a547ce610733e3da401c7"
  },
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('base': conda)",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
